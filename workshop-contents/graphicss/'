package main
import (
	" image "
	" image / color "
	" image / gif "
	" io "
	" math "
	" math / rand "
	" os "
)

var palette = []color.Color{ color.White , color.Black }

const (
	whiteIndex = 0 // First colour in palette
	blackIndex = 1 // Next colour in palette
)

func main () {
	lissajous ( os.Stdout )
}

func lissajous ( out io.Writer) {
	const (
		cycles = 5
		res = 0.001
		size = 100
		nframes = 64
		delay = 8
	)

freq := rand.Float64() * 3.0 // Relative frequency of y oscillator
anim := gif.GIF{ LoopCount : nframes }
phase := 0.0 // phase difference
for i := 0; i < nframes ; i ++ { // 64 Animation frames
	rect := image.Rect(0 , 0 , 2* size +1 , 2* size +1)
	// Create a new black animation frame
	img := image.NewPaletted( rect , palette )
	// " cycles " times revolutions
	for t := 0.0; t < cycles *2* math.Pi ; t += res {
		x := math.Sin( t )
		y := math.Sin( t * freq + phase )
		img . SetColorIndex ( size + int ( x * size +0.5) , size + int ( y * size +0.5) , blackIndex )
	}
	phase += 0.1
	anim.Delay = append(anim.Delay , delay )
	anim.Image = append(anim.Image , img )
}
gif . EncodeAll ( out , & anim )
}

